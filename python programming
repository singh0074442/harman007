((((((week 2))))
loop until the guess is correct

ask the user about number?



if ( number is correct, exit loop)
else repeat asking with feedback




end loop




((((for numbers)))


import random
random_number = random.randint(1,100)
print random_number




#loop until the user guess the correct number


user_number = int(input("enter the number"))
print user_number



while random_number != user_number:
    if (user_number < random_number):
        print("guess a bigger number")
    if(user_number > random_number):
        print("guess a smaller number")

random_number = int(input("enter the number: "))



print("success!!")



#end loop





(((((((((((for number of trials))))
import random
random_number = random.randint(1,100)
print random_number




#loop until the user guess the correct number


user_number = int(input("enter the number"))
print user_number
number_of_trials = 1



while random_number != user_number:
    if (user_number < random_number):
        print("guess a bigger number")
    if(user_number > random_number):
        print("guess a smaller number")
        number_of_trials += 1



random_number = int(input("enter the number: "))




print("success!! number of trials = " + str(number_of_trials))



#end loop


((((((week3))))))))))
class student:

    def  __init__(self,first_name,last_name,student_id):
        self.first_name = first_name
        self.last_name = last_name
        self.student_id = student_id




class cestarcollege:



            def __init__(self,address,manager):
                self.address = address
                self.manager = manager


            student1 =student("harman", "singh", "c0789767")
            student2=student("adam", "singh", "c0987654")

            print(student1.first_name)
            print(student2.first_name)
            
            
            
            
    (((((((((((        week 4     ))))))))))))))))
    class circle:
    def __init__(self,radius):
        self.radius = radius


    def setradius(self,newradius):
         self.radius = newradius




    def getarea(self):
        return  3.14 * self.radius ** 2


    def getperimeter(self):
         return 2 * 3.14*self.radius




circle3= circle(78)
print(circle3.getarea)
print(circle3.getperimeter())






circle3= circle(78)
print("area of circle  is "+ str(circle3.getarea()))
print("perimeter of circle  is "+ str(circle3.getperimeter()))
circle3.setradius(14)
print("area of  new circle  is "+ str(circle3.getarea()))
print("perimeter of  new circle  is "+ str(circle3.getperimeter()))



(((((((((week 5))))))))))))))))


class WiredPhone:


    def __init__(self,brand):
        self.brand = brand


    def getBrand(self):
        return self.brand


    def wireddial(self):
        print("dialing now through wire...")



    def hangup(self):
        print("hanging up now.....")
        
        
        ((((((((calendar))))))))
        
        class Event:
    def __init__(self, beg_hr, beg_min, end_hr, end_min, location, desc):
        self.beg_hr = beg_hr
        self.beg_min = beg_min
        self.end_hr = end_hr
        self.end_min = end_min
        self.desc = desc
        self.location = location

    def printEvent(self):
        result = "From " + str(self.beg_hr) + ":" + str(self.beg_min)
        result += " To " + str(self.end_hr) + ":" + str(self.end_min) + "\n"
        result += "Description: " + self.desc + "\n"
        result += "Location: " + self.location +"\n"
        result += "----------------------------------------------------------"
        return result


class Day:
    def __init__(self, name):
        self.name = name
        self.events = []

    def addEvent(self, event):
        self.events.append(event)

    def printEvents(self):

        for i in self.events:
            print(i.printEvent())

class Month:
    def __init__(self, month_numerical_value):
        self.month_numerical_value = month_numerical_value
        if month_numerical_value == 2:
            self.number_of_days = 28
        elif month_numerical_value == 1 or month_numerical_value == 3 or month_numerical_value == 5 or month_numerical_value == 7:
            self.number_of_days = 31
        else:
            self.number_of_days = 30
        self.days = [self.number_of_days]

class Year:
    def __init__(self, year_numerical_value):
        self.months = [12]

class Calendar:
    def __init__(self):
        self.years = [100]
        #1996 - 2096

    def initialize_calendar(self):
        for y in range(1996, 2029):
            yr = Year(y)
            self.years[y-1996] = yr
            for m in range(0, 11):
                mon = Month(m)
                yr.months[m] = mon
                for d in range(0, mon.number_of_days-1):
                    dy = Day(d)
                    mon.days[d] = dy
                    print(str(d) + " - " + str(m))
        print("Initialization completed.")


    def addEvent(self, beg_hr, beg_min, end_hr, end_min, location, desc, year, month, day):
        tmp_event = Event(beg_hr, beg_min, end_hr, end_min, location, desc)





